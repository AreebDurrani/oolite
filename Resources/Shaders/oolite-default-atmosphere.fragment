/*
	oolite-default-atmosphere.fragment
	Default fragment shader for Oolite NEW_PLANETS.


	© 2009–2013 Jens Ayton

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

#define DIFFUSE_LIGHT		(gl_LightSource[1].diffuse.rgb)
#define AMBIENT_LIGHT		(gl_LightModel.ambient.rgb)

uniform vec4			atmPosition;
uniform float			atmRadius;

// No vNormal, because normal is always 0,0,1 in tangent space.
varying vec3			vEyeVector;
varying vec3			vLight1Vector;

const vec3				biasColor = vec3(0.0, 0.0, 1.0);
const vec3				kTerminatorThreshold = vec3(0.105, 0.18, 0.28); // old: vec3(0.1, 0.105, 0.12);
const float				kFresnelExponent = 4.0;
const float				biasColorMixRatio = 0.1;


void main()
{
	vec3 totalColor = vec3(0.0);
	vec3 normal = vec3(0.0, 0.0, 1.0);

	// Diffuse light
	vec3 light1Vector = normalize(vLight1Vector);
	vec3 eyeVector = normalize(vEyeVector);
	vec3 diffuseColor = DIFFUSE_LIGHT;
	
	float NdotV = clamp(dot(normal, eyeVector), 0.0, 1.0);
	
	float atmDistance = length(atmPosition.xyz);
	float minDistance = atmRadius + 3500.0;
	float magicDistance = atmDistance - minDistance;
	float cosThreshold = 0.14; // 81.95 deg
	float newOpacityExponent = 3.0;
	
	// the outer atmosphere rim does not follow exactly the curvature of the planet for small radii
	// adjust thresholds and exponents to cope for when planet radius <= 4km - note: radius is fed
	// into the shader with a scale factor of 10
	if (atmRadius <= 40000.0)
	{
		cosThreshold = 0.17; // 80.21 deg
		newOpacityExponent = 5.0;
	}
	
	// mix in some light blue color
	totalColor += diffuseColor * vec3(0.85, 0.85, 1.0);
	
	// create a fresnel torus around the planet
	vec3 fresnel = vec3(pow(1.0 - (NdotV * 0.3), kFresnelExponent));
	
	// get the fresnel lit up from the correct direction
	vec3 invLight = vec3(dot(light1Vector, normal));
	totalColor *=	dot(normalize(fresnel), invLight) *
					mix(totalColor, biasColor, biasColorMixRatio) *
					clamp(totalColor, vec3(0.0), diffuseColor);
	
	// magic herebelow - painting the orange-reddish tinted terminator
	totalColor *= smoothstep(vec3(0.0), kTerminatorThreshold, abs(vec3(light1Vector.z)));
	
	// add ambient light
	totalColor += AMBIENT_LIGHT;
	
	// slightly more lightsource color at the very edge
	if (NdotV < cosThreshold)  totalColor = mix(totalColor, diffuseColor, 0.04);
	
	// calculate when the atmosphere should fade in / out
	float quant = atmDistance < (minDistance + 2000.0) ?
					magicDistance / 2000.0 : 1.0;
					
	// calculate the final opacity, special handling for
	// angles > arccos(cosThreshold) to fade atmosphere out at its edge
	float newOpacity = quant * (NdotV > cosThreshold ?
								fresnel.r * cosThreshold  / NdotV :
								pow(NdotV / cosThreshold, newOpacityExponent));
	
	gl_FragColor = vec4(totalColor, newOpacity);
}
